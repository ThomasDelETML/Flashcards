import type { HttpContext } from '@adonisjs/core/http'
import { loginUserValidator } from '#validators/auth'
import User from '#models/user'

/**
 * Controller pour l'authentification
 */
export default class AuthController {
  /**
   * G√©rer la connexion d'un utilisateur
   */
  async handleLogin({ request, auth, session, response }: HttpContext) {
    console.log('üîç Donn√©es re√ßues :', request.all()) // V√©rifie ce qui arrive

    try {
      // ‚úÖ V√©rification des donn√©es avec VineJS
      const payload = await request.validateUsing(loginUserValidator)
      console.log('‚úÖ Donn√©es valid√©es :', payload)

      // V√©rifie que `password` est bien r√©cup√©r√© apr√®s validation
      if (!payload.password) {
        session.flash('error', 'Le mot de passe est manquant apr√®s validation.')
        return response.redirect().back()
      }

      // V√©rifie l'utilisateur avec AdonisJS
      const user = await User.verifyCredentials(payload.username, payload.password)

      // Connexion
      await auth.use('web').login(user)
      session.flash('success', 'Connexion r√©ussie !')
      return response.redirect().toRoute('home')
    } catch (error) {
      console.error("‚ùå Erreur de validation ou d'authentification :", error)

      session.flash('error', 'Identifiants invalides ou erreur de validation.')
      return response.redirect().back()
    }
  }

  /**
   * G√©rer la d√©connexion d'un utilisateur
   */
  async handleLogout({ auth, session, response }: HttpContext) {
    // Utilise le Guard 'web' pour d√©connecter l'utilisateur -> Voir le fichier config/auth.ts
    await auth.use('web').logout()

    // Affiche un message √† l'utilisateur
    session.flash('success', "L'utilisateur s'est d√©connect√© avec succ√®s")

    // Redirige la r√©ponse sur la route 'home'
    return response.redirect().toRoute('home')
  }
}
